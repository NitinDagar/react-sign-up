{"version":3,"sources":["commonService.js","components/inputError.js","components/icons.js","components/PasswordValidator.js","components/input.js","pages/signUp.js","App.js","serviceWorker.js","index.js"],"names":["classNames","classes","ret","Object","keys","forEach","cal","containNumbers","value","test","InputError","props","state","errorClass","this","visible","className","errormessage","React","Component","Icons","type","viewBox","d","fill","PasswordValidator","validatorTitle","validatorClass","valid","name","validData","minChars","mincharacters","capitalLetters","requirecapitals","numbers","requirenumbers","Input","handleFocus","setState","focus","validatorVisible","validator","errorVisible","handleBlur","handleChange","e","onChange","target","validate","str","length","forminvalid","isEmail","parseInt","replace","allValid","isValidatorValid","password","empty","inputGroupClasses","htmlFor","text","placeholder","id","defaultValue","onFocus","onBlur","autoComplete","allValidatorValid","requireNumbers","SignUp","handleInput","submit","preventDefault","refs","email","firstName","lastName","checkEmailExist","that","axios","post","campaignUuid","data","then","response","status","toast","error","signup","catch","success","confirmPassword","ref","onClick","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8RAAO,SAASA,EAAWC,GACvB,IAAIC,EAAM,GAOV,OANAC,OAAOC,KAAKH,GAASI,SAAQ,SAACC,GACtBL,EAAQK,KACRJ,EAAMA,EAAMI,EAAM,QAInBJ,EAoBJ,SAASK,EAAeC,GAC3B,MAAO,KAAKC,KAAKD,G,IC1BAE,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAQf,IAAIC,EAAab,EAAW,CACxB,iBAAmB,EACnB,QAAWc,KAAKH,MAAMI,QACtB,WAAcD,KAAKH,MAAMI,UAG7B,OACI,yBAAKC,UAAWH,GACZ,8BAAOC,KAAKH,MAAMM,mB,GAlBMC,IAAMC,WCDzBC,E,uKAKb,OAAON,KAAKH,MAAMU,MAEd,IAAK,eACH,OACE,yBAAKC,QAAQ,aACb,0BAAMC,EAAE,2SAMZ,IAAK,cACH,OACE,yBAAKD,QAAQ,aACb,0BAAMC,EAAE,yUAMZ,IAAK,qBACH,OACE,yBAAKD,QAAQ,aACX,0BAAME,KAAK,UAAUD,EAAE,yEACvB,0BAAMC,KAAK,UAAUD,EAAE,qN,GA7BNL,IAAMC,WCEpBM,E,kDAEjB,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAMf,IAAIc,EAAiB,GAEjBC,EAAiB3B,EAAW,CAC5B,oBAAsB,EACtB,QAAWc,KAAKH,MAAMI,QACtB,WAAcD,KAAKH,MAAMI,UAgB7B,OAXIW,EADAZ,KAAKH,MAAMiB,MAEP,wBAAIZ,UAAU,yBACTF,KAAKH,MAAMkB,KADhB,UAKA,wBAAIb,UAAU,2BACTF,KAAKH,MAAMkB,KADhB,UAMJ,yBAAKb,UAAWW,GACZ,yBAAKX,UAAU,uBAEVU,EAED,wBAAIV,UAAU,cAEV,wBAAIA,UAAWhB,EAAW,CAAE,MAASc,KAAKH,MAAMmB,UAAUC,YACtD,uBAAGf,UAAU,cAAb,IAA2B,kBAAC,EAAD,CAAMK,KAAK,uBAAtC,KACA,uBAAGL,UAAU,gBAAb,IAA6B,kBAAC,EAAD,CAAMK,KAAK,iBAAxC,KACA,0BAAML,UAAU,iBAAiBF,KAAKH,MAAMqB,cAA5C,wBAGJ,wBAAIhB,UAAWhB,EAAW,CAAE,MAASc,KAAKH,MAAMmB,UAAUG,kBACtD,uBAAGjB,UAAU,cAAb,IAA2B,kBAAC,EAAD,CAAMK,KAAK,uBAAtC,KACA,uBAAGL,UAAU,gBAAb,IAA6B,kBAAC,EAAD,CAAMK,KAAK,iBAAxC,KACA,0BAAML,UAAU,iBAAhB,qBAAmDF,KAAKH,MAAMuB,gBAA9D,oBAGJ,wBAAIlB,UAAWhB,EAAW,CAAE,MAASc,KAAKH,MAAMmB,UAAUK,WACtD,uBAAGnB,UAAU,cAAb,IAA2B,kBAAC,EAAD,CAAMK,KAAK,uBAAtC,KACA,uBAAGL,UAAU,gBAAb,IAA6B,kBAAC,EAAD,CAAMK,KAAK,iBAAxC,KACA,0BAAML,UAAU,iBAAhB,qBAAmDF,KAAKH,MAAMyB,eAA9D,mB,GApDmBlB,IAAMC,WCEhCkB,E,kDAEjB,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAWV2B,YAAc,WACV,EAAKC,SAAS,CACVC,OAAO,EACPC,kBAAkB,IAGlB,EAAK9B,MAAM+B,WACX,EAAKH,SAAS,CACVI,cAAc,KApBP,EAyBnBC,WAAa,WACT,EAAKL,SAAS,CACVC,OAAO,EACPC,kBAAkB,KA5BP,EAgCnBI,aAAe,SAACC,GACZ,EAAKnC,MAAMoC,SAASD,GACpB,EAAKtC,MAAQsC,EAAEE,OAAOxC,MACtB,EAAKyC,SAASH,IAnCC,EAuCnBG,SAAW,SAACH,GAER,GAAI,EAAKnC,MAAMsC,SACX,OAAQ,EAAKtC,MAAMsC,UACf,IAAK,QACD,MJzCIC,EIyCQ,EAAK1C,QJrCxB0C,EAAIC,OAAS,GI4CF,OANA,EAAKZ,SAAS,CACVX,OAAO,EACPe,cAAc,EACd1B,aAAc,EAAKN,MAAMM,oBAE7B,EAAKN,MAAMyC,cAGX,EAAKb,SAAS,CACVX,OAAO,EACPe,cAAc,IAGtB,MACJ,IAAK,SJjDd,SAAiBO,GAEpB,MADS,wJACCzC,KAAKyC,IIgDeG,CAAQ,EAAK7C,OAEvB,EAAK+B,SAAS,CACVX,OAAO,EACPe,cAAc,EACd1B,aAAc,MAGlB,EAAKsB,SAAS,CACVX,OAAO,EACPe,cAAc,EACd1B,aAAc,EAAKN,MAAMM,eAE7B,EAAKN,MAAMyC,eAEf,MACJ,IAAK,WAED,IAAItB,EAAY,CACZC,SAAU,EAAKvB,MAAM2C,QAAUG,SAAS,EAAK3C,MAAMqB,eACnDC,gBJjEMzB,EIiEwB,EAAKA,MJhE7CA,EACC+C,QAAQ,UAAW,IAAIJ,QI+D+B,EAAKxC,MAAMuB,iBACxDC,QAAS5B,EAAe,EAAKC,QAG3BgD,EAAY1B,EAAUC,UAAYD,EAAUG,gBAAkBH,EAAUK,QAC9E,EAAKI,SAAS,CACVX,MAAO4B,EACPC,iBAAkB3B,EAClBa,cAAc,EAAK/B,MAAM4B,QAASgB,EAClCvC,aAAc,EAAKN,MAAMM,eAExBuC,GACD,EAAK7C,MAAMyC,cAEf,MACJ,IAAK,kBAED,EAAKb,SAAS,CACVX,MAAO,EAAKpB,OAAS,EAAKA,QAAU,EAAKG,MAAM+C,SAC/Cf,cAAe,EAAKnC,SAAW,EAAKA,QAAU,EAAKG,MAAM+C,UACzDzC,aAAc,EAAKN,MAAMM,eAEzB,EAAKT,QAAU,EAAKG,MAAM+C,UAC1B,EAAK/C,MAAMyC,cJxF5B,IAAuB5C,EAZN0C,GIDhB,EAAKtC,MAAQ,CACT4B,OAAO,EACPiB,iBAAkB,GAClB7B,OAAO,EACP+B,OAAO,GAEX,EAAKnD,MAAQ,GARE,E,qDAqHf,IAAIoD,EAAoB5D,EAAW,CAC/B,aAAe,EACf,YAAec,KAAKF,MAAMgB,MAC1B,aAAgBd,KAAKF,MAAMgB,MAC3B,YAAed,KAAKF,MAAM+C,MAC1B,eAAkB7C,KAAKH,MAAMH,MAAM2C,OAAS,EAC5C,cAAiBrC,KAAKF,MAAM4B,MAC5B,iBAAoB1B,KAAKF,MAAM4B,QAGnC,OACI,yBAAKxB,UAAW4C,GACZ,2BAAO5C,UAAU,cAAc6C,QAAS/C,KAAKH,MAAMmD,MAC/C,0BAAM9C,UAAU,cAAcF,KAAKH,MAAMmD,OAG7C,2CACQhD,KAAKH,MADb,CAEIoD,YAAajD,KAAKH,MAAMoD,YACxB/C,UAAU,QACVgD,GAAIlD,KAAKH,MAAMmD,KACfG,aAAcnD,KAAKH,MAAMsD,aACzBzD,MAAOM,KAAKH,MAAMH,MAClBuC,SAAUjC,KAAK+B,aACfqB,QAASpD,KAAKwB,YACd6B,OAAQrD,KAAK8B,WACbwB,aAAa,SAGjB,kBAAC,EAAD,CACIrD,QAASD,KAAKF,MAAM+B,aACpB1B,aAAcH,KAAKF,MAAMK,eAG7B,yBAAKD,UAAU,mBACX,uBAAGA,UAAU,oBAAb,IAAiC,kBAAC,EAAD,CAAMK,KAAK,iBAA5C,KACA,uBAAGL,UAAU,oBAAb,IAAiC,kBAAC,EAAD,CAAMK,KAAK,gBAA5C,MAGHP,KAAKH,MAAM+B,WAAa,kBAAC,EAAD,CACrB3B,QAASD,KAAKF,MAAM6B,iBACpBZ,KAAMf,KAAKH,MAAMmD,KACjBtD,MAAOM,KAAKH,MAAMH,MAClBsB,UAAWhB,KAAKF,MAAM6C,iBACtB7B,MAAOd,KAAKF,MAAMyD,kBAClBrC,cAAelB,KAAKH,MAAMqB,cAC1BE,gBAAiBpB,KAAKH,MAAMuB,gBAC5BoC,eAAgBxD,KAAKH,MAAM2D,sB,GAtKZpD,IAAMC,W,iBCDpBoD,E,kDAIjB,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAHV6C,UAAW,EAEQ,EAanBJ,YAAc,WACV,EAAKI,UAAW,GAdD,EAkBnBgB,YAAc,SAAC1B,GACX,EAAKP,SAAL,eACKO,EAAEE,OAAOnB,KAAOiB,EAAEE,OAAOxC,SApBf,EAwBnBiE,OAAS,SAAC3B,GACN,EAAKU,UAAW,EAChBV,EAAE4B,iBACF,EAAKC,KAAKC,MAAM3B,WAChB,EAAK0B,KAAKE,UAAU5B,WACpB,EAAK0B,KAAKG,SAAS7B,WACnB,EAAK0B,KAAKjB,SAAST,WAGf,EAAKO,UACL,EAAKuB,mBAlCM,EAsCnBA,gBAAkB,WACd,IAAIC,EAAI,eACRC,IAAMC,KAAK,yCAA0C,CACjDC,aAAc,uCACdC,KAAM,CACFR,MAAO,EAAKhE,MAAMgE,SAGrBS,MAAK,SAAUC,GACsB,OAA9BA,EAASF,KAAKA,KAAKG,OACnBC,IAAMC,MAAM,+CAEZT,EAAKU,YAGZC,OAAM,SAAUF,GACbD,IAAMC,MAAM,oBAtDL,EA0DnBC,OAAS,WACL,IAAMV,EAAI,eACVC,IAAMC,KAAK,oCAAqC,CAC5CC,aAAc,uCACdC,KAAM,CACFP,UAAW,EAAKjE,MAAMiE,UACtBC,SAAU,EAAKlE,MAAMkE,SACrBF,MAAO,EAAKhE,MAAMgE,MAClBlB,SAAU,EAAK9C,MAAM8C,YAGxB2B,MAAK,SAAUC,GACZE,IAAMI,QAAQ,8BACdZ,EAAKzC,SAAS,CACVsC,UAAW,GACXC,SAAU,GACVF,MAAO,GACPlB,SAAU,GACVmC,gBAAiB,GACjBD,SAAS,OAGhBD,OAAM,SAAUF,GACbD,IAAMC,MAAM,4BA/EpB,EAAK7E,MAAQ,CACTiE,UAAW,GACXC,SAAU,GACVF,MAAO,GACPlB,SAAU,GACVmC,gBAAiB,GACjBD,SAAS,GARE,E,qDAuFf,OACI,yBAAK5E,UAAU,0BAETF,KAAKF,MAAMgF,SAAW,yBAAK5E,UAAU,uBACnC,8CACA,yDACA,8BACI,kBAAC,EAAD,CACI8E,IAAI,YACJhC,KAAK,aACLjC,KAAK,YACLoB,SAAS,QACTzC,MAAOM,KAAKF,MAAMiE,UAClB9B,SAAUjC,KAAK0D,YACfvD,aAAa,4BACbmC,YAAatC,KAAKsC,cAGtB,kBAAC,EAAD,CACI0C,IAAI,WACJhC,KAAK,YACLjC,KAAK,WACLoB,SAAS,QACTzC,MAAOM,KAAKF,MAAMkE,SAClB/B,SAAUjC,KAAK0D,YACfvD,aAAa,2BACbmC,YAAatC,KAAKsC,cAGtB,kBAAC,EAAD,CACI0C,IAAI,QACJhC,KAAK,gBACLjC,KAAK,QACLoB,SAAS,QACTzC,MAAOM,KAAKF,MAAMgE,MAClB7B,SAAUjC,KAAK0D,YACfvD,aAAa,mBACbmC,YAAatC,KAAKsC,cAGtB,kBAAC,EAAD,CACI0C,IAAI,WACJhC,KAAK,YACLjC,KAAK,WACLR,KAAK,WACL4B,SAAS,WACTzC,MAAOM,KAAKF,MAAM8C,SAClBX,SAAUjC,KAAK0D,YACfvD,aAAa,sBACbe,cAAe,EACfE,gBAAiB,EACjBE,eAAgB,EAChBM,UAAU,OACVU,YAAatC,KAAKsC,cAgBtB,4BACI2C,QAASjF,KAAK2D,OACdpD,KAAK,SACLL,UAAU,sBAHd,oBAQPF,KAAKF,MAAMgF,SAAW,yBAAK5E,UAAU,uBAAuB,wD,GAxKzCE,IAAMC,WC0B3B6E,MAzBf,WACE,OACE,oCACE,kBAAC,IAAD,CACEC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAEd,yBAAKzF,UAAU,uBAEb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,UCXU0F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAF,GACLgC,QAAQhC,MAAMA,EAAMiC,c","file":"static/js/main.549a816e.chunk.js","sourcesContent":["export function classNames(classes) {\n    let ret = \"\"\n    Object.keys(classes).forEach((cal) => {\n        if (classes[cal]) {\n            ret = ret + cal + \" \";\n        }\n    })\n\n    return ret;\n}\n\nexport function isEmpty(str) {\n    if (!str) {\n        return true\n    }\n    return !(str.length > 0)\n}\n\nexport function isEmail(str) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(str);\n}\n\nexport function countCapitals(value) {\n    var str = value;\n    return str.replace(/[^A-Z]/g, \"\").length;\n}\n\nexport function containNumbers(value) {\n    return /\\d/.test(value);\n}\n","import React from 'react';\nimport { classNames } from '../commonService'\n\nexport default class InputError extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n\n        var errorClass = classNames({\n            'error_container': true,\n            'visible': this.props.visible,\n            'invisible': !this.props.visible\n        });\n\n        return (\n            <div className={errorClass}>\n                <span>{this.props.errormessage}</span>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nexport default class Icons extends React.Component {\n\n    \n    render() {\n\n        switch(this.props.type) {\n\n            case 'circle_error': \n              return (\n                <svg viewBox=\"0 0 20 20\">\n                <path d=\"M10,0.982c4.973,0,9.018,4.046,9.018,9.018S14.973,19.018,10,19.018S0.982,14.973,0.982,10\n                  S5.027,0.982,10,0.982 M10,0C4.477,0,0,4.477,0,10c0,5.523,4.477,10,10,10s10-4.477,10-10C20,4.477,15.523,0,10,0L10,0z M9,5.703\n                  V5.441h2.5v0.262l-0.66,5.779H9.66L9,5.703z M9.44,12.951h1.621v1.491H9.44V12.951z\"/>\n                </svg>\n              )\n      \n            case 'circle_tick': \n              return (\n                <svg viewBox=\"0 0 23 23\">\n                <path d=\"M11.5,23C5.2,23,0,17.8,0,11.5S5.2,0,11.5,0S23,5.2,23,11.5S17.8,23,11.5,23z M11.5,1C5.7,1,1,5.7,1,11.5S5.7,22,11.5,22\n                  S22,17.3,22,11.5S17.3,1,11.5,1z M10.4,15.2l6.7-7c0.2-0.2,0.2-0.5,0-0.7c-0.2-0.2-0.5-0.2-0.7,0L10,14.2L7,11\n                  c-0.2-0.2-0.5-0.2-0.7,0c-0.2,0.2-0.2,0.5,0,0.7l3.4,3.5c0.1,0.1,0.2,0.1,0.3,0.1S10.3,15.3,10.4,15.2z\"/>\n                </svg>\n              )\n      \n            case 'circle_tick_filled':\n              return (\n                <svg viewBox=\"0 0 20 20\">\n                  <path fill=\"#4FB07F\" d=\"M9.5,0C14.7,0,19,4.3,19,9.5S14.7,19,9.5,19S0,14.7,0,9.5S4.3,0,9.5,0z\"/>\n                  <path fill=\"#FFFFFF\" d=\"M8.7,12.9c-0.1,0-0.2,0-0.3-0.1l-2.4-2.5c-0.1-0.1-0.1-0.4,0-0.5c0.1-0.2,0.4-0.2,0.5,0L8.7,12l4.6-5\n                    c0.1-0.1,0.4-0.1,0.5,0c0.1,0.2,0.1,0.4,0,0.5L9,12.8C9,12.8,8.9,12.9,8.7,12.9C8.8,12.9,8.8,12.9,8.7,12.9z\"/>\n                </svg>\n              )\n      \n              default: break;\n          } \n        }\n    }\n\n","import React from 'react';\nimport Icon from './icons'\nimport { classNames } from '../commonService';\n\nexport default class PasswordValidator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n\n        let validatorTitle = \"\"\n\n        let validatorClass = classNames({\n            'password_validator': true,\n            'visible': this.props.visible,\n            'invisible': !this.props.visible\n        });\n\n\n        if (this.props.valid) {\n            validatorTitle =\n                <h4 className=\"validator_title valid\">\n                    {this.props.name} IS OK\n        </h4>\n        } else {\n            validatorTitle =\n                <h4 className=\"validator_title invalid\">\n                    {this.props.name} RULES\n        </h4>\n        }\n\n        return (\n            <div className={validatorClass}>\n                <div className=\"validator_container\">\n\n                    {validatorTitle}\n\n                    <ul className=\"rules_list\">\n\n                        <li className={classNames({ 'valid': this.props.validData.minChars })}>\n                            <i className=\"icon_valid\"> <Icon type=\"circle_tick_filled\" /> </i>\n                            <i className=\"icon_invalid\"> <Icon type=\"circle_error\" /> </i>\n                            <span className=\"error_message\">{this.props.mincharacters} characters minimum</span>\n                        </li>\n\n                        <li className={classNames({ 'valid': this.props.validData.capitalLetters })}>\n                            <i className=\"icon_valid\"> <Icon type=\"circle_tick_filled\" /> </i>\n                            <i className=\"icon_invalid\"> <Icon type=\"circle_error\" /> </i>\n                            <span className=\"error_message\">Contains at least {this.props.requirecapitals} capital letter</span>\n                        </li>\n\n                        <li className={classNames({ 'valid': this.props.validData.numbers })}>\n                            <i className=\"icon_valid\"> <Icon type=\"circle_tick_filled\" /> </i>\n                            <i className=\"icon_invalid\"> <Icon type=\"circle_error\" /> </i>\n                            <span className=\"error_message\">Contains at least {this.props.requirenumbers} number</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport InputError from './inputError'\nimport Icon from './icons'\nimport PasswordValidator from './PasswordValidator'\nimport { classNames, isEmpty, isEmail, countCapitals, containNumbers } from '../commonService'\n\nexport default class Input extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            focus: false,\n            isValidatorValid: {},\n            valid: true,\n            empty: true\n        }\n        this.value = \"\"\n\n    }\n\n    handleFocus = () => {\n        this.setState({\n            focus: true,\n            validatorVisible: true\n        })\n\n        if (this.props.validator) {\n            this.setState({\n                errorVisible: false\n            })\n        }\n    }\n\n    handleBlur = () => {\n        this.setState({\n            focus: false,\n            validatorVisible: false\n        })\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(e)\n        this.value = e.target.value\n        this.validate(e)\n\n    }\n\n    validate = (e) => {\n\n        if (this.props.validate) {\n            switch (this.props.validate) {\n                case \"empty\":\n                    if (isEmpty(this.value)) {\n                        this.setState({\n                            valid: false,\n                            errorVisible: true,\n                            errormessage: this.props.errormessage\n                        })\n                        this.props.forminvalid()\n                        return\n                    } else {\n                        this.setState({\n                            valid: true,\n                            errorVisible: false,\n                        })\n                    }\n                    break;\n                case \"email\":\n                    const valid = isEmail(this.value)\n                    if (valid) {\n                        this.setState({\n                            valid: true,\n                            errorVisible: false,\n                            errormessage: \"\"\n                        })\n                    } else {\n                        this.setState({\n                            valid: false,\n                            errorVisible: true,\n                            errormessage: this.props.errormessage\n                        })\n                        this.props.forminvalid()\n                    }\n                    break;\n                case \"password\":\n\n                    let validData = {\n                        minChars: this.value.length >= parseInt(this.props.mincharacters),\n                        capitalLetters: countCapitals(this.value) >= this.props.requirecapitals,\n                        numbers: containNumbers(this.value)\n                    }\n\n                    const allValid = (validData.minChars && validData.capitalLetters && validData.numbers);\n                    this.setState({\n                        valid: allValid,\n                        isValidatorValid: validData,\n                        errorVisible: this.state.focus || allValid ? false : true,\n                        errormessage: this.props.errormessage\n                    })\n                    if (!allValid) {\n                        this.props.forminvalid()\n                    }\n                    break;\n                case \"confirmPassword\":\n\n                    this.setState({\n                        valid: this.value && this.value === this.props.password,\n                        errorVisible: !this.value || !(this.value === this.props.password),\n                        errormessage: this.props.errormessage\n                    })\n                    if (this.value !== this.props.password) {\n                        this.props.forminvalid()\n                    }\n\n                    break;\n\n                default: break;\n\n            }\n        }\n    }\n\n\n    render() {\n\n        var inputGroupClasses = classNames({\n            'input_group': true,\n            'input_valid': this.state.valid,\n            'input_error': !this.state.valid,\n            'input_empty': this.state.empty,\n            'input_hasValue': this.props.value.length > 0,\n            'input_focused': this.state.focus,\n            'input_unfocused': !this.state.focus\n        });\n\n        return (\n            <div className={inputGroupClasses}>\n                <label className=\"input_label\" htmlFor={this.props.text}>\n                    <span className=\"label_text\">{this.props.text}</span>\n                </label>\n\n                <input\n                    {...this.props}\n                    placeholder={this.props.placeholder}\n                    className=\"input\"\n                    id={this.props.text}\n                    defaultValue={this.props.defaultValue}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoComplete=\"off\"\n                />\n\n                <InputError\n                    visible={this.state.errorVisible}\n                    errormessage={this.state.errormessage}\n                />\n\n                <div className=\"validationIcons\">\n                    <i className=\"input_error_icon\"> <Icon type=\"circle_error\" /> </i>\n                    <i className=\"input_valid_icon\"> <Icon type=\"circle_tick\" /> </i>\n                </div>\n\n                {this.props.validator && <PasswordValidator\n                    visible={this.state.validatorVisible}\n                    name={this.props.text}\n                    value={this.props.value}\n                    validData={this.state.isValidatorValid}\n                    valid={this.state.allValidatorValid}\n                    mincharacters={this.props.mincharacters}\n                    requirecapitals={this.props.requirecapitals}\n                    requireNumbers={this.props.requireNumbers}\n                />}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Input from '../components/input'\nimport axios from 'axios'\nimport { toast } from 'react-toastify';\n\nexport default class SignUp extends React.Component {\n\n    allValid = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            success: false\n        }\n\n    }\n\n    forminvalid = () => {\n        this.allValid = false;\n    }\n\n\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    submit = (e) => {\n        this.allValid = true;\n        e.preventDefault();\n        this.refs.email.validate();\n        this.refs.firstName.validate();\n        this.refs.lastName.validate();\n        this.refs.password.validate();\n        // this.refs.confirmPassword.validate();\n\n        if (this.allValid) {\n            this.checkEmailExist()\n        }\n    }\n\n    checkEmailExist = () => {\n        let that = this;\n        axios.post(' https://api.raisely.com/v3/check-user', {\n            campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n            data: {\n                email: this.state.email\n            }\n        })\n            .then(function (response) {\n                if (response.data.data.status !== \"OK\") {\n                    toast.error(\"Invalid Email Please choose different Email\");\n                } else {\n                    that.signup()\n                }\n            })\n            .catch(function (error) {\n                toast.error(\"Server Error\");\n            });\n    }\n\n    signup = () => {\n        const that = this;\n        axios.post('https://api.raisely.com/v3/signup', {\n            campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n            data: {\n                firstName: this.state.firstName,\n                lastName: this.state.lastName,\n                email: this.state.email,\n                password: this.state.password,\n            }\n        })\n            .then(function (response) {\n                toast.success(\"Success Thanks for Joining\");\n                that.setState({\n                    firstName: \"\",\n                    lastName: \"\",\n                    email: \"\",\n                    password: \"\",\n                    confirmPassword: \"\",\n                    success: true\n                })\n            })\n            .catch(function (error) {\n                toast.error(\"Email Already Exists\");\n            });\n    }\n\n    render() {\n\n        return (\n            <div className=\"create_account_screen\">\n\n                {!this.state.success && <div className=\"create_account_form\" >\n                    <h1>Create account</h1>\n                    <p>React Form with Validation</p>\n                    <form>\n                        <Input\n                            ref=\"firstName\"\n                            text=\"First Name\"\n                            name=\"firstName\"\n                            validate=\"empty\"\n                            value={this.state.firstName}\n                            onChange={this.handleInput}\n                            errormessage=\"First Name can't be empty\"\n                            forminvalid={this.forminvalid}\n                        />\n\n                        <Input\n                            ref=\"lastName\"\n                            text=\"Last Name\"\n                            name=\"lastName\"\n                            validate=\"empty\"\n                            value={this.state.lastName}\n                            onChange={this.handleInput}\n                            errormessage=\"Last Name can't be empty\"\n                            forminvalid={this.forminvalid}\n                        />\n\n                        <Input\n                            ref=\"email\"\n                            text=\"Email Address\"\n                            name=\"email\"\n                            validate=\"email\"\n                            value={this.state.email}\n                            onChange={this.handleInput}\n                            errormessage=\"Email is invalid\"\n                            forminvalid={this.forminvalid}\n                        />\n\n                        <Input\n                            ref=\"password\"\n                            text=\"Passsword\"\n                            name=\"password\"\n                            type=\"password\"\n                            validate=\"password\"\n                            value={this.state.password}\n                            onChange={this.handleInput}\n                            errormessage=\"Password is invalid\"\n                            mincharacters={8}\n                            requirecapitals={1}\n                            requirenumbers={1}\n                            validator=\"true\"\n                            forminvalid={this.forminvalid}\n                        />\n\n                        {/* <Input\n                            ref=\"confirmPassword\"\n                            text=\"Confirm Password\"\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            validate=\"confirmPassword\"\n                            value={this.state.confirmPassword}\n                            onChange={this.handleInput}\n                            errormessage=\"Password does not Match\"\n                            password={this.state.password}\n                            forminvalid={this.forminvalid}\n                        /> */}\n\n                        <button\n                            onClick={this.submit}\n                            type=\"submit\"\n                            className=\"button button_wide\">\n                            CREATE ACCOUNT\n                        </button>\n                    </form>\n                </div>}\n                {this.state.success && <div className=\"create_account_form\" ><h1>Thanks For Joining</h1></div>}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport './App.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SignUpForm from \"./pages/signUp.js\"\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <div className=\"application_wrapper\">\n\n        <div className=\"application_routeHandler\">\n          <SignUpForm />\n        </div>\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}